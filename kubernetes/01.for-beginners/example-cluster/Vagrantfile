# -*- mode: ruby -*-
# vi: set ft=ruby :
require 'fileutils'

# Load the config override file
CONFIG = File.join(File.dirname(__FILE__), "./", "config.rb")

if File.exist?(CONFIG)
  print "File exists: ", CONFIG, "\n"
  require CONFIG
end

# # Check for arguments to `up` or `provision` with specific vms
vms = ARGV.grep_v(/^-/).size - 1
$number_of_vms = vms == 0 ? $nodes.size : vms

VAGRANTFILE_API_VERSION = "2"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure(VAGRANTFILE_API_VERSION) do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.
  config.ssh.insert_key = false # Use the same ssh key for each node
	config.vm.boot_timeout

  node_counter = 0
  $nodes.each do |node|
    config.vm.define node[:hostname] do |nodeconfig|
      # Every Vagrant development environment requires a box. You can search for
      # boxes at https://vagrantcloud.com/search.
      nodeconfig.vm.box = "centos/8"

      # Disable automatic box update checking. If you disable this, then
      # boxes will only be checked for updates when the user runs
      # `vagrant box outdated`. This is not recommended.
      # config.vm.box_check_update = false
      nodeconfig.vm.box_check_update = true
      nodeconfig.vm.hostname = node[:hostname]

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine. In the example below,
      # accessing "localhost:8080" will access port 80 on the guest machine.
      # NOTE: This will enable public access to the opened port
      # config.vm.network "forwarded_port", guest: 80, host: 8080
      nodeconfig.vm.network "forwarded_port", guest: 80, host: node[:http_port]
      nodeconfig.vm.network "forwarded_port", guest: 443, host: node[:https_port]

      # Create a forwarded port mapping which allows access to a specific port
      # within the machine from a port on the host machine and only allow access
      # via 127.0.0.1 to disable public access
      # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

      # Create a private network, which allows host-only access to the machine
      # using a specific IP.
      # config.vm.network "private_network", ip: "192.168.33.10"

      # Create a public network, which generally matched to bridged network.
      # Bridged networks make the machine appear as another physical device on
      # your network.
      # config.vm.network "public_network"
      nodeconfig.vm.network "private_network", ip: node[:ip]

      # Share an additional folder to the guest VM. The first argument is
      # the path on the host to the actual folder. The second argument is
      # the path on the guest to mount the folder. And the optional third
      # argument is a set of non-required options.
      # config.vm.synced_folder "../data", "/vagrant_data"

			# https://www.vagrantup.com/docs/synced-folders/basic_usage.html#disabling
			#nodeconfig.vm.synced_folder ".", "/vagrant", disabled: true

      # nodeconfig.ssh.private_key_path = ["vagrant_rsa", "vagrant_rsa"]
      # nodeconfig.vm.provision "file", source: "vagrant_rsa.pub", destination: "~/.ssh/"

      # Provider-specific configuration so you can fine-tune various
      # backing providers for Vagrant. These expose provider-specific options.
      # Example for VirtualBox:
      #
      # config.vm.provider "virtualbox" do |vb|
      #   # Display the VirtualBox GUI when booting the machine
      #   vb.gui = true
      #
      #   # Customize the amount of memory on the VM:
      #   vb.memory = "1024"
      # end
      #
      # View the documentation for the provider you are using for more
      # information on available options.
      if Vagrant.has_plugin?("vagrant-hostmanager")
        nodeconfig.hostmanager.enabled = true
        nodeconfig.hostmanager.manage_host = false
        nodeconfig.hostmanager.manage_guest = true
      end

      nodeconfig.vm.provider :virtualbox do |vb|
        vb.gui = false
        vb.memory = node[:memory]
        vb.cpus = node[:cpus]
        # capture pcap data
        #   vb.customize ['modifyvm', :id, '--nictrace1', 'on']
        #   vb.customize ['modifyvm', :id, '--nictracefile1', vm_name +'.pcap']
      end

      node_counter += 1
      if node_counter == $number_of_vms
        # Enable provisioning with a shell script. Additional provisioners such as
        # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
        # documentation for more information about their specific syntax and use.
        # config.vm.provision "shell", inline: <<-SHELL
        #   apt-get update
        #   apt-get install -y apache2
        # SHELL

				# If this is config.vm.provision then it will run once for each node and nodeconfig will run once at the end.
				# https://www.vagrantup.com/docs/provisioning/ansible.html#ansible-parallel-execution
        nodeconfig.vm.provision :ansible do |ansible|
          ansible.inventory_path = "inventories/hosts.yml"
          ansible.playbook = "k8s-cluster-playbook.yml"
          ansible.become = true
          ansible.become_user = 'root'
          ansible.limit = "all"
          ansible.host_key_checking = false
          ansible.verbose = ""
          ansible.raw_arguments = ["--forks=4", "--flush-cache"]
        end
      end
    end
  end
end
